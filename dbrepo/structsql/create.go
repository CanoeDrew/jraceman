package structsql

import (
  "database/sql"
  "log"
  "strings"
)

// Placeholder is ? for MySQL,$N for PostgreSQL,
// SQLite uses either of those, Oracle is :param1

// CreateTable creates a table with the given name and with columns
// based on the fields of the given entity by using the sql string
// generated by CreateTableSql.
func CreateTable(db *sql.DB, tableName string, entity interface{}) error {
  sql := CreateTableSql(tableName, entity)
  _, err := db.Exec(sql)
  return err
}

// CreateTableSql generates an SQL CREATE TABLE command using
// the fields of the given struct. For each field in the struct:
//   * The field name is converted to lower case for the column name.
//   * int and string fields are declared as that same type column.
//   * The id field is declared as primary key.
//   * Non-pointer fields are declared as not null.
//   * Field names ending in ID are declared as foreign key references to the
//     id field of a table whose name matches the first part of the field name
func CreateTableSql(tableName string, entity interface{}) string {
  columnInfos := ColumnInfos(entity);
  columnSpecs := make([]string, len(columnInfos))
  for i, colInfo := range columnInfos {
    columnSpec := colInfo.Name + " " + colInfo.Type
    if colInfo.Name == "id" {
      columnSpec = columnSpec + " primary key"
    } else {
      if colInfo.Required {
        columnSpec = columnSpec + " not null"
      }
      if colInfo.IsForeignKey {
        columnSpec = columnSpec + " references " + colInfo.FKTable + "(id)"
      }
    }
    columnSpecs[i] = columnSpec
  }
  sql := "CREATE TABLE " + tableName + "(" + strings.Join(columnSpecs, ", ") + ");"
  log.Printf("CreateTableSql: %v\n", sql)
  return sql
}
